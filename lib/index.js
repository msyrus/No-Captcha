// Generated by IcedCoffeeScript 108.0.9
(function() {
  var NoCaptcha, exports, https, querystring;

  https = require('https');

  querystring = require('querystring');

  module.exports = exports = NoCaptcha = (function() {
    function NoCaptcha(publicKey, privateKey, isSecure) {
      this.PUBLIC_KEY = publicKey;
      this.PRIVATE_KEY = privateKey;
      this.IS_SECURE = (isSecure != null) === true;
    }

    NoCaptcha.prototype.toHTML = function(options) {
      var div, exOptions, external, script, script_src;
      script_src = "www.google.com/recaptcha/api.js";
      script_src = (this.IS_SECURE ? 'https://' : 'http://') + script_src;
      div = "<div class='g-recaptcha' data-sitekey='" + this.PUBLIC_KEY + "'";
      if (options != null) {
        exOptions = {};
        if (options.onload) {
          exOptions.options = options.onload;
        }
        if (options.render) {
          exOptions.options = options.render;
        }
        if (options.hl) {
          exOptions.options = options.hl;
        }
        external = querystring.stringify(exOptions);
        script_src = script_src + '?' + external;
        if (options.theme === 'dark' || options.theme === 'light') {
          div = div + (" data-theme='" + options.theme + "'");
        }
        if (options.type === 'audio' || options.type === 'image') {
          div = div + (" data-type='" + options.type + "'");
        }
        if (options.size === 'normal' || options.size === 'compact') {
          div = div + (" data-size='" + options.size + "'");
        }
        if (options.tabindex) {
          div = div + (" data-tabindex='" + options.tabindex + "'");
        }
        if (options.callback) {
          div = div + (" data-callback='" + options.callback + "'");
        }
        if (options["expired-callback"]) {
          div = div + " data-expired-callback='" + options["expired-callback"] + "'";
        }
      }
      div = div + "></div>";
      script = "<script src='" + script_src + "' async defer></script>";
      return script + div;
    };

    NoCaptcha.prototype.verify = function(_arg, callback) {
      var external, externalObj, remoteip, reqOption, request, response;
      response = _arg.response, remoteip = _arg.remoteip;
      if (!callback) {
        return new Error('No callback');
      }
      if (response == null) {
        return callback(new Error('No response'));
      }
      externalObj = {
        secret: this.PRIVATE_KEY,
        response: response
      };
      if (remoteip) {
        externalObj["remoteip"] = remoteip;
      }
      external = querystring.stringify(externalObj);
      reqOption = {
        host: 'www.google.com',
        path: '/recaptcha/api/siteverify?' + external,
        port: 443
      };
      return request = https.get("https://www.google.com/recaptcha/api/siteverify?" + external, function(resp) {
        var data;
        data = '';
        resp.on('data', function(chunk) {
          return data += chunk;
        });
        return resp.on('end', function() {
          var res;
          res = JSON.parse(data);
          if (res.success === true) {
            return callback(null, res);
          } else {
            return callback(new Error(res['error-codes'] || "Invalide response"));
          }
        });
      }).on('error', function(err) {
        return callback(err);
      });
    };

    return NoCaptcha;

  })();

}).call(this);
